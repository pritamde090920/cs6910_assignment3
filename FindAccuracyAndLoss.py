import Utilities
import torch



def calculate(modelEval,outputSequence,paddingIndex,lossFunction):
    '''
        Parameters:
            modelEval : output from the model
            outputSequence : original word in the dataset
            paddingIndex : encoding of the padding characters in the vocabulary
            lossFunction : loss function used in the model
        Returns :
            modelEval : updated output to be used in the next batch of data
            correctPredictions : number of words predicted correctly
            totalLoss : loss generated by the current batch
        Function:
            Calculates number of correct predictions and loss for the data passed
    '''

    '''calculate correct predictions'''
    dim=modelEval.shape[2]
    predictedSequence=modelEval.argmax(dim=2)
    acuurate=(predictedSequence==outputSequence)+(outputSequence==paddingIndex)
    acuurate=torch.clamp(acuurate,max=1)
    acuurateAlongOneColumn=acuurate.all(dim=0)
    total=acuurateAlongOneColumn.sum()
    correctPredictions=total.item()

    '''calculate loss'''
    modelEvalSplit=modelEval[1:]
    modelEval=modelEvalSplit.reshape(-1,dim)
    bengaliSequenceSplit=outputSequence[1:]
    bengaliSequence=bengaliSequenceSplit.reshape(-1)
    loss=lossFunction(modelEval,bengaliSequence)
    totalLoss=loss.item()

    return modelEval,correctPredictions,totalLoss



'''class to find the accuracy and loss'''
class FindAccuracyAndLoss:
    def findAccuracyAndLoss(framework,dataLoader,batchSize,paddingIndex):
        '''
            Parameters:
                framework : object of the architecture
                dataLoader : data on which to calculate the accuracy and loss
                batchSize : batch size used
                paddingIndex : encoding of the padding characters in the vocabulary
            Returns :
                averageLoss : average loss across the dataset
                accuracy : accuracy of correct prediction 
            Function:
                Calculates the accuracy percentage and average loss for the dataset
        '''

        '''sets loss function'''
        framework.eval()
        lossFunction=Utilities.setLossFunction()
    
        totalLoss=0.0
        correctPredictions=0
        
        with torch.no_grad():
            '''iterate the whole dataset'''
            for _,data in enumerate(dataLoader):
                '''get the original source and target word'''
                inputSequence=data[0]
                outputSequence=data[1]
                inputSequence=inputSequence.T
                inputSequence=Utilities.setDevice(inputSequence)
                outputSequence=outputSequence.T
                outputSequence=Utilities.setDevice(outputSequence)

                '''run the encoder-decoder architecture with no teacher forcing (as we are in inference step)'''
                modelEval,_=framework(inputSequence,outputSequence,teacherRatio=0.0)
                
                '''calculate the correct predictions and loss for the current batch of data'''
                modelEval,correctBatch,lossBatch=calculate(modelEval,outputSequence,paddingIndex,lossFunction)
                correctPredictions+=correctBatch
                totalLoss+=lossBatch
            
            '''avergae loss and accuracy percentage'''
            accuracy=correctPredictions/(len(dataLoader)*batchSize)
            averageLoss=totalLoss/len(dataLoader)
            return averageLoss,accuracy